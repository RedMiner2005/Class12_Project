"""
Voting System - By Pratyush
Prototype

Note:
1. This program requires the cryptopgraphy package (for Fernet encryption)
    You are welcome to get rid of the nonsensical way in which it is used.
2. Please create the folder directories
    as specified by cand_path and
    vote_path in the parent directory
    of the script
3. The program asks for 10 votes only
"""


import pickle
from os.path import isfile
from hashlib import sha224

from cryptography.fernet import Fernet


# Global Parameters
cand_path = "candidates/"  # The path where the candidate list will be stored
vote_path = "votes/"       # The path where the votes will be stored
is_debug = False           # Enables debug messages


# Utility functions
path = lambda is_cand, token: (cand_path if is_cand else vote_path) + token.decode() + ".dat"
get_hash = lambda cat, name: sha224((cat + "::" + name).encode()).digest()
debug = lambda msg: print("[DEBUG] {\n", msg, "\n}", sep="") if is_debug else None


# Main functions
def register() -> bytes:
    """Registers the candidates.
    It first asks for the category names and the names of the candidates in
    each category and then stores it in a file whose name is the encryption
    key to be used by the vote data for some reason.

    Please note, the candidate list is NOT encrypted. Why? Only Goodness knows.
    Why is the vote data encrypted with the key being public?
    Something's wrong with me, that's why.

    :returns: The encryption key
    """
    key = Fernet.generate_key()
    candidates = {}
    while True:
        cat = input("Enter category: ")
        if cat == "QUIT":
            break
        print("Enter the names for the category:")
        names = []
        while True:
            name = input()
            if name == "QUIT":
                break
            names.append(name)
        candidates[cat] = names
        print()
    print("\n")

    with open(path(True, key), "wb") as file:
        pickle.dump(candidates, file)
    
    return key


def read_candidates(token):
    """Reads the candidate list

    :param token: The encryption key/file name of the candidate list
    :returns: The encryption key, and the loaded data
    """
    with open(path(True, token), "rb") as file:
        if (data := pickle.load(file)):
            return token, data


def get_vote(token, candidates):
    """Gets the vote of a person from each category.
    It returns a dict with the first element being
    the token and the rest being hashes of the candidate details
    to whom the vote was casted

    :param token: The encryption key/file name of the candidate list.
    :param candidates: The candidate data
    :returns: The votes as a dictionary
    """
    votes = [token]
    for cat in candidates:
        names = candidates[cat]
        l = len(names)
        print(f"Candidates for {cat}:")
        print("\n".join([f"{i+1}. {names[i]}" for i in range(l)]))
        while True:
            try:
                option = int(input(f"Please choose an option from 1 to {l}: ")) - 1
                assert 0 <= option < l
            except Exception as e:
                print("Invalid input")
                continue
            break
        votes.append(get_hash(cat, names[option]))
        print()

    return votes


def store_votes(votes: list):
    """Stores the list of vote data
    It iterates through votes, which should 
    contain the vote data generated by get_vote()
    The encrypted data is stored in a file in vote_path
    with its name being the encryption key. Just for fun.

    :param votes: A list of vote data
    """
    f = Fernet(votes[0])
    debug(votes)
    if isfile(path(False, votes[0])):
        with open(path(False, votes[0]), "rb") as file:
            debug("FILE FOUND!")
            data = pickle.loads(f.decrypt(file.read()))
    else:
        debug("FILE NOT FOUND!")
        data = {}
    for vote in votes[1:]:
        data[vote] = data[vote] + 1 if vote in data else 1
    debug(data)

    with open(path(False, votes[0]), "wb") as file:
        file.write(f.encrypt(pickle.dumps(data)))


def read_votes(token, candidates):
    """Reads and displays the data from a vote file
    
    :param token: The encryption key/file name of the candidate list/vote data
    :param candidates: The candidate list
    """
    f = Fernet(token)
    if isfile(path(False, token)):
        data = pickle.loads(f.decrypt(open(path(False, token), "rb").read()))
        debug("Votes found: " + str(data))
    else:
        debug("Votes not found")
        data = {}
    for cat in candidates:
        for name in candidates[cat]:
            if (h := get_hash(cat, name)) in data:
                print(f"Cat: {cat}, Name: {name}, Votes:", data[h])
            else:
                print(f"Cat: {cat}, Name: {name}, Votes: 0")


def main():
    """The main program"""

    # Intro stuff
    print("Voting system - Prototype")
    print("Designed by Pratyush")
    print("____________________________")
    print("(Type QUIT to exit any of the loops)\n")

    # Give the option to use an existing candidate list or create a new one
    if input("Do you want to register new candidates (Y for yes, otherwise no): ").lower() == "y":
        token, candidates = read_candidates(register())
    else:
        token, candidates = read_candidates(input("Enter the token: ").encode())
    print()
    debug("Token: " + token.decode())

    # Shorthand for 'get 10 votes and store them all in a file'
    list(map(store_votes, [get_vote(token, candidates) for i in range(10)]))

    # Display the results
    read_votes(token, candidates)


if __name__ == "__main__":
    main()
